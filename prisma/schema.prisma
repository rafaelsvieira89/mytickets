// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  phone String
  email String
  address String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  users User[]
  customers Customer[]

}

model Customer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  phone String
  email String
  address String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  organizationId String @db.ObjectId
  organization Organization @relation(fields: [organizationId], references: [id])

  tickets Ticket[]

}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  code String
  name String
  description String
  status String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  customerId String @db.ObjectId
  customer Customer @relation(fields: [customerId], references: [id])

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  attachments Attachment[]

  @@unique([code])
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())


  ticketId String @db.ObjectId
  tickt Ticket @relation(fields: [ticketId], references: [id])

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

}

model TicketItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  created_at DateTime? @default(now())
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  //Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String? @db.ObjectId
  organization Organization? @relation(fields: [organizationId], references: [id])


  tickets Ticket[]
  customers Customer[]


  ticketItems TicketItem[]

  attachments Attachment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}